- name: Ensure vagrant is installed
  ansible.builtin.shell:
    cmd: |
      set -o pipefail
      wget -O - https://apt.releases.hashicorp.com/gpg | gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg

      echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com \
      $(grep -oP '(?<=UBUNTU_CODENAME=).*' /etc/os-release || lsb_release -cs) main" | tee /etc/apt/sources.list.d/hashicorp.list

      apt update && apt install vagrant
      vagrant plugin install virtualbox_WSL2

    executable: /bin/bash
    creates: /usr/bin/vagrant
  become: true

# here we generate ssh keys for control node user (who runs ansible command)
- name: Manage SSH keypair
  vars:
    ssh_dir: "{{ lookup('env', 'HOME') }}/.ssh"
    ssh_key_path: "{{ ssh_dir }}/id_rsa"
    root_ssh_dir: /root/.ssh
    root_ssh_keypath: /root/.ssh/id_rsa
    whoami: "{{ lookup('env', 'USER') }}"
  block:
    - name: Check .ssh directory
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
        mode: "0777"
        owner: "{{ whoami }}"
      loop:
        - "{{ ssh_dir }}"
        - "{{ root_ssh_dir }}"
      become: true

    - name: SSH-keypair for managed nodes
      community.crypto.openssh_keypair:
        path: "{{ ssh_key_path }}"
        type: rsa
        size: 4096
        force: false
        owner: "{{ whoami }}"
      become: true

    - name: Share the same generated keypair with root user
      ansible.builtin.copy:
        src: "{{ item }}"
        remote_src: true
        dest: "{{ root_ssh_dir }}"
        owner: root
        mode: preserve
      loop:
        - "{{ ssh_key_path }}"
        - "{{ ssh_key_path }}.pub"
      become: true

    - name: Set pubkey as fact
      ansible.builtin.slurp:
        src: "{{ ssh_key_path }}.pub"
      register: pubkey_data
      become: true

    - name: Decode ssh_public_key
      ansible.builtin.set_fact:
        ssh_public_key: "{{ pubkey_data['content'] | b64decode }}"

    - name: Set authorized keys
      ansible.builtin.lineinfile:
        path: "{{ item }}"
        search_string: "{{ ssh_public_key }}"
        line: "{{ ssh_public_key }}"
        state: present
        mode: '0666'
        create: true
      loop:
        - "{{ ssh_dir }}/authorized_keys"
        - "{{ root_ssh_dir }}/authorized_keys"
      become: true

- name: Prepare and execute vagrant
  vars:
    vagrant_data_dir: "{{ ansible_user_dir if ansible_facts.get('virtualization_type') != 'wsl' else '/mnt/c/Vagrant' }}/vagrant_data"
  block:
    - name: Make directory for vagrant data
      ansible.builtin.file:
        path: "{{ vagrant_data_dir }}"
        state: directory
        mode: "0755"
      become: true

    - name: Render Vagrantfile
      ansible.builtin.template:
        src: Vagrantfile.jinja2
        dest: "{{ vagrant_data_dir }}/Vagrantfile"
        mode: "0600"
      become: true

    - name: Vagrant up! (WSL only)
      ansible.builtin.shell:
        cmd: vagrant up
        chdir: "{{ vagrant_data_dir }}"
        executable: /bin/bash
      become: true
      environment:
        VAGRANT_WSL_ENABLE_WINDOWS_ACCESS: "1"
        PATH: "{{ ansible_env.PATH }}:/mnt/c/Windows/System32:/mnt/c/Windows/System32/WindowsPowerShell/v1.0"
      changed_when: true # always update vms
      when: ansible_facts.get('virtualization_type') == "wsl"

    - name: Vagrant up! (native Linux)
      ansible.builtin.shell:
        cmd: vagrant up --provision
        chdir: "{{ vagrant_data_dir }}"
        executable: /bin/bash
      become: true
      changed_when: true # always update vms
      when: ansible_facts.get('virtualization_type') != "wsl"
